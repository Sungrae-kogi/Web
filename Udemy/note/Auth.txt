passport라는 라이브러리를 이용해서 쉽게가능하다고 한다. 

인증 : 사용자가 자신의 신원(사용자 이름, 비밀번호, API 키 등)을 증명하는 과정
인증은 사용자가 누구인지 확인하는것.

권한 : 인증된 사용자가 특정 리소스에 액세스하고 행동할 수 있는지 여부를 결정하는 프로세스.
권한은 인증된 사용자가 어떤 작업을 사용할 수 있는지에 대한 규칙을 정의.

*패스워드를 저장하거나 하지않는 방법
패스워드는 보안을 위해서 있는 그대로 저장해서는 안된다. -> 해결방법으로는 Hashing
해시 함수라는 것으로 암호화하는것 그리고 해시 함수의 결과를 DB에 저장하는것이다.

**해시함수란?? 
-> 임의의 크기의 데이터를 입력하면 고정된 크기의 데이터를 출력한다.

입력값이 약간만 변경되더라도, 출력값은 크게변해야한다 누군가가 대조하여 알아낼수 없게하도록 해야한다.

동일한 입력값이, 언제나 같은 값으로 출력되어야 한다.

동일한 두 출력값이 도출되는 충돌이 거의 일어나서는 안된다.

암호 해시의 경우 특이하게 느린 함수를 사용해야한다.? -> 빠른 해시함수를 사용한다면 사람들이 훨씬 쉽게 침입이 가능

해시함수는 여러함수의 넓은 집합이라고도 할수있을정도로 복잡하고 어렵게 구성되어있다 많은 논문과 연구가있지만.
해시 함수는 몇개되지 않을정도로.

해시함수의 목적
-> 누군가가 DB에 접근하여 해시함수의 결과물을 얻더라도 그거를 역추적해서 원래의 임의의 데이터를 얻을 수 없도록.
이렇게 역추적이 불가능하면서 다양한 값을 출력하는 단방향 함수인것.

패스워드 솔트
>솔트는 암호를 해시할 때 암호를 역추적하거나 알아내는것을 어렵게하기위해 취하는 추가적인 단계이다

**필수로 이해해야할 3가지 
1. 많은 웹사이트에서 많은 사람들이 같은 암호를 사용한다.
2. 서로다른 사람이 같은 암호를 사용하는경우가 많습니다.
3. 암호를 저장하는데 적합한 해시 알고리즘은 몇개뿐이다.

이중 우리가 사용할 알고리즘은 Bcrypt 
입력값이 일정할때 같은 결과를 내야하기때문에 해커가 DB를 조회해서 어떤 Bcrypt를 썼다는걸 보고 가장 많이사용된 비밀번호들을 
돌려보며 일일히 hashed 결과에 따른 입력값을 역추적한 역방향 조회 테이블를 만들수도있지만, 그거를 암호 솔트라는 추가적인 단계를 설정해서
방지가 가능하다

패스워드 솔트의 원리? -> 누군가의 암호를 해시할때 암호를 해시하면서 임의의 값을 넣는 겁니다.
솔트를 추가하면 누군가가 미리 만든 데이터베이스에 해시 암호를 대조해 볼 수 없게된다.
이렇게하면 다른사람이 같은 암호를 사용하더라도 솔트값이 붙어서 해시되면서 다른 해시출력값이 나오게된다.